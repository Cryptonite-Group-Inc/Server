From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jacob <jacob@stellardev.org>
Date: Wed, 19 Jan 2022 20:49:06 -0700
Subject: [PATCH] Tick Skipping


diff --git a/src/main/java/com.nftworlds/NFTWorldsConfig.java b/src/main/java/com.nftworlds/NFTWorldsConfig.java
index daff070cf4eb124e27c81f06a8ac9180a1eaa5f3..4fb6368aee86bde3d70c0c9ff1db3ae4b29eb1d0 100644
--- a/src/main/java/com.nftworlds/NFTWorldsConfig.java
+++ b/src/main/java/com.nftworlds/NFTWorldsConfig.java
@@ -319,4 +319,10 @@ public class NFTWorldsConfig {
         randomTickSpeed = getInt("tick-speed.random-tick.speed", 3);
     }
 
+    public static int tickSkippingCactus = 1; // 1 skips no ticks, 2 skips 50% of ticks. % of ticks skipped calculated with formula (100-100/X)%
+    private static void tickSkippingCactus() { tickSkippingCactus = getInt("tick-skipping.cactus", 1); }
+
+    public static int tickSkippingSpawners = 1;
+    private static void tickSkippingSpawners() { tickSkippingSpawners = getInt("tick-skipping.spawners", 1); }
+
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 8bb151bfed80e246aed3c6ca17db603000bb9cda..a71b77fd2bcf2b6574bb0cfd597a058b2afafa6b 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -55,7 +55,7 @@ public abstract class BaseSpawner {
         this.nextSpawnData = new SpawnData();
         this.minSpawnDelay = NFTWorldsConfig.minSpawnDelay;
         this.maxSpawnDelay = NFTWorldsConfig.maxSpawnDelay;
-        this.spawnCount = NFTWorldsConfig.spawnCount;
+        this.spawnCount = NFTWorldsConfig.spawnCount * NFTWorldsConfig.tickSkippingSpawners;
         this.maxNearbyEntities = NFTWorldsConfig.maxNearbyEntities;
         this.requiredPlayerRange = NFTWorldsConfig.requiredPlayerRange;
         this.spawnRange = NFTWorldsConfig.spawnRange;
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index 2a02fdf58640d26b82e0ca22d0d8ff3326921b61..c8fb4e8d4e7f1e653f4d353c4ba25b832292f859 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -1,7 +1,6 @@
 package net.minecraft.world.level.block;
 
-import java.util.Iterator;
-import java.util.Random;
+import com.nftworlds.NFTWorldsConfig;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -22,7 +21,10 @@ import net.minecraft.world.level.material.Material;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
-import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
+import java.util.Iterator;
+import java.util.Random;
 
 public class CactusBlock extends Block {
 
@@ -47,28 +49,40 @@ public class CactusBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        BlockPos blockposition1 = pos.above();
-
-        if (world.isEmptyBlock(blockposition1)) {
-            int i;
-
-            for (i = 1; world.getBlockState(pos.below(i)).is((Block) this); ++i) {
-                ;
-            }
-
-            if (i < world.paperConfig.cactusMaxHeight) { // Paper - Configurable growth height
-                int j = (Integer) state.getValue(CactusBlock.AGE);
-
-                if (j >= (byte) range(3, ((100.0F / world.spigotConfig.cactusModifier) * 15) + 0.5F, 15)) { // Spigot
-                    CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
-                    BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, 0);
-
-                    world.setBlock(pos, iblockdata1, 4);
-                    iblockdata1.neighborChanged(world, blockposition1, this, pos, false);
-                } else {
-                    world.setBlock(pos, (BlockState) state.setValue(CactusBlock.AGE, j + 1), 4);
+        if (random.nextInt(NFTWorldsConfig.tickSkippingCactus) <= 0) { //Randomly generate int. (Ex: skipCactusTicks at 2 would skip 50% of ticks)
+            BlockPos blockposition1 = pos.above();
+            if (world.isEmptyBlock(blockposition1)) {
+                int i;
+                for (i = 1; world.getBlockState(pos.below(i)).is((Block) this); ++i) {
+                    ;
+                }
+                if (i < world.paperConfig.cactusMaxHeight) { // Paper - Configurable growth height
+                    int j = (Integer) state.getValue(CactusBlock.AGE);
+                    if (j >= (byte) range(3, ((100.0F / world.spigotConfig.cactusModifier) * 15) + 0.5F, 15)) { // Spigot
+                        CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
+                        BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, 0);
+                        world.setBlock(pos, iblockdata1, 4);
+                        iblockdata1.neighborChanged(world, blockposition1, this, pos, false);
+                    } else {
+                        //world.setBlock(pos, (BlockState) state.setValue(CactusBlock.AGE, j + 1), 4);
+                        //Tick skipping compensation
+                        if (NFTWorldsConfig.tickSkippingCactus > 1) { //Not processing 100% of ticks
+                            int newAge = Integer.valueOf(j + NFTWorldsConfig.tickSkippingCactus); //Calculate a new age & compensate for missed ticks
+                            byte checkAgainst = (byte) range(3, ((100.0F / world.spigotConfig.cactusModifier) * 15) + 0.5F, 15);
+                            if (newAge >= checkAgainst) { //if the new age of the cactus is larger than the limit
+                                CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
+                                BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, newAge - checkAgainst);
+
+                                world.setBlock(pos, iblockdata1, 4);
+                                iblockdata1.neighborChanged(world, blockposition1, this, pos, false);
+                            } else { //set age normally
+                                world.setBlock(pos, state.setValue(CactusBlock.AGE, newAge), 4);
+                            }
+                        } else { //In this case, we're ticking through 100% of the ticks so we're just gonna do it normally
+                            world.setBlock(pos, state.setValue(CactusBlock.AGE, Integer.valueOf(j + 1)), 4);
+                        }
+                    }
                 }
-
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index b7b4af02c78b9bec2f4a087dbd1c848c72102d61..7688578fde84af6a6d37cb943cc6df3bfdd4b74b 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -14,13 +14,9 @@ import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.shorts.ShortList;
 import it.unimi.dsi.fastutil.shorts.ShortListIterator;
-import java.util.BitSet;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Map;
+
+import java.util.*;
 import java.util.Map.Entry;
-import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
@@ -126,6 +122,8 @@ public class LevelChunk implements ChunkAccess {
     private volatile boolean isLightCorrect;
     private final Int2ObjectMap<GameEventDispatcher> gameEventDispatcherSections;
 
+    public final Random random = new Random();
+
     // Paper start - rewrite light engine
     protected volatile SWMRNibbleArray[] blockNibbles;
     protected volatile SWMRNibbleArray[] skyNibbles;
@@ -1483,6 +1481,11 @@ public class LevelChunk implements ChunkAccess {
                 if (LevelChunk.this.isTicking(blockposition)) {
                     if (!NFTWorldsConfig.optimizeTileEntities) {
                         try {
+
+                            if (NFTWorldsConfig.tickSkippingSpawners != 1 && blockEntity instanceof SpawnerBlockEntity && random.nextInt(NFTWorldsConfig.tickSkippingSpawners) > 0) {
+                                return;
+                            }
+
                             ProfilerFiller gameprofilerfiller = LevelChunk.this.level.getProfiler();
 
                             gameprofilerfiller.push(this::getType);
@@ -1515,6 +1518,11 @@ public class LevelChunk implements ChunkAccess {
                         }
                     } else {
                         try {
+
+                            if (NFTWorldsConfig.tickSkippingSpawners != 1 && blockEntity instanceof SpawnerBlockEntity && random.nextInt(NFTWorldsConfig.tickSkippingSpawners) > 0) {
+                                return;
+                            }
+
                             ProfilerFiller gameprofilerfiller = LevelChunk.this.level.getProfiler();
 
                             gameprofilerfiller.push(this::getType);
